pipeline {
    agent any

    environment {
        // Definir el nombre de la imagen Docker como variable de entorno para reutilizarla
        DOCKER_IMAGE = 'mi-aplicacion-nodejs:latest'
    }

    stages {
        stage('Preparar Entorno') {
            steps {
                script {
                    // Limpiar el workspace para empezar en un estado limpio
                    deleteDir()
                }
            }
        }

        stage('Construir Docker Image') {
            steps {
                script {
                    // Usar el comando 'docker.build' del plugin Docker Pipeline
                    docker.build(DOCKER_IMAGE)
                }
            }
        }

        stage('Ejecutar Docker Container') {
            steps {
                script {
                    // Detener y eliminar el contenedor si ya existe, para evitar conflictos
                    try {
                        sh "docker stop mi-contenedor-nodejs"
                        sh "docker rm mi-contenedor-nodejs"
                    } catch (Exception ignored) {
                        // Ignorar errores si el contenedor no existe
                    }
                    
                    // Ejecutar un nuevo contenedor a partir de la imagen construida
                    sh "docker run -d --name mi-contenedor-nodejs -p 3000:3000 ${DOCKER_IMAGE}"
                }
            }
        }

        stage('Verificar') {
            steps {
                script {
                    // Esperar brevemente para que el servicio inicie y realizar una prueba simple
                    sh 'sleep 10' // Mejor usar una herramienta de espera más sofisticada en un caso real
                    sh 'curl http://localhost:3000'
                }
            }
        }
    }

    post {
        always {
            // Limpiar contenedores e imágenes para evitar el consumo innecesario de recursos
            script {
                sh "docker stop mi-contenedor-nodejs || true"
                sh "docker rm mi-contenedor-nodejs || true"
                // Opcional: Eliminar la imagen Docker si no se va a reutilizar
                // sh "docker rmi ${DOCKER_IMAGE} || true"
            }
        }
    }
}

